package com.pixelboob.lufa.lib{	import org.spicefactory.lib.logging.LogContext;	import org.spicefactory.lib.logging.Logger;			/**	 * @author mikej	 */	[LufaClass(className="math")]	public class Maths	{		private static var logger : Logger = LogContext.getLogger(Math);				[LufaVariable(variableName="pi")]		public static var pi : Number = Math.PI;								[LufaVariable(variableName="huge")]		public static var huge : Number = Number.MAX_VALUE;						[LufaMethod(methodName="abs", returnValues=1)]		public static function abs(args:Array) : Array		{			return [Math.abs(args[0])];		}				[LufaMethod(methodName="acos", returnValues=1)]		public static function acos(args:Array) : Array		{			return [Math.acos(args[0])];		}				[LufaMethod(methodName="asin", returnValues=1)]		public static function asin(args:Array) : Array		{			return [Math.asin(args[0])];		}				[LufaMethod(methodName="atan", returnValues=1)]		public static function atan(args:Array) : Array		{			return [Math.atan(args[0])];		}				[LufaMethod(methodName="atan2", returnValues=1)]		public static function atan2(args:Array) : Array		{			return [Math.atan2(args[0], args[1])];		}				[LufaMethod(methodName="ceil", returnValues=1)]		public static function ceil(args:Array) : Array		{			return [Math.ceil(args[0])];		}				[LufaMethod(methodName="cos", returnValues=1)]		public static function cos(args:Array) : Array		{			return [Math.cos(args[0])];		}		[LufaMethod(methodName="cosh", returnValues=1)]		public static function cosh(args:Array) : Array		{					var x : Number = args[0];			var result : Number = (Math.exp(x) + Math.exp(-x)) / 2;			return [result];		}				[LufaMethod(methodName="deg", returnValues=1)]		public static function deg(args:Array) : Array		{			return [args[0] * (180 / Math.PI)];		}		[LufaMethod(methodName="exp", returnValues=1)]		public static function exp(args:Array) : Array		{			return [Math.exp(args[0])];		}				[LufaMethod(methodName="floor", returnValues=1)]		public static function floor(args:Array) : Array		{			return [Math.floor(args[0])];		}				[LufaMethod(methodName="fmod", returnValues=1)]		public static function fmod(args:Array) : Array		{			return [args[0] - args[1] * Math.floor(args[0]/args[1])];		}				[LufaMethod(methodName="frexp", returnValues=1)]		public static function frexp(args:Array) : Array		{			var x : Number = args[0];			var e : Number = Math.floor((Math.log(x) / Math.log(2)) + 1);			var m : Number = (x / Math.pow(2,e)); 			return [m, e];		}		[LufaMethod(methodName="ldexp", returnValues=1)]		public static function ldexp(args:Array) : Array		{			return [args[0] * (Math.pow(2, args[1]))];		}						[LufaMethod(methodName="log", returnValues=1)]		public static function log(args:Array) : Array		{			return [Math.log(args[0])];		}						[LufaMethod(methodName="log10", returnValues=1)]		public static function log10(args:Array) : Array		{			return [Math.log(args[0]) * Math.LOG10E];		}		[LufaMethod(methodName="max", returnValues=1)]		public static function max(args:Array) : Array		{			return [Math.max(args[0], args[1])];		}				[LufaMethod(methodName="min", returnValues=1)]		public static function min(args:Array) : Array		{			return [Math.min(args[0], args[1])];		}				[LufaMethod(methodName="modf", returnValues=1)]		public static function modf(args:Array) : Array		{			var integral : Number = Math.floor(args[0]);			var fractional : Number = Math.abs(args[0]) - Math.abs(integral);			return [integral, fractional];		}				[LufaMethod(methodName="pow", returnValues=1)]		public static function pow(args:Array) : Array		{			return [Math.pow(args[0], args[1])];		}				[LufaMethod(methodName="rad", returnValues=1)]		public static function rad(args:Array) : Array		{			return [args[0] * (Math.PI / 180)];		}				[LufaMethod(methodName="random", returnValues=1)]		public static function random(args:Array) : Array		{			if(args.length==1)			{				return [randRange(1,args[0])];			}			else if(args.length==2)			{				return [randRange(args[0], args[1])];			}			else			{				return [Math.random()];			}			}				[LufaMethod(methodName="sin", returnValues=1)]		public static function sin(args:Array) : Array		{			return [Math.sin(args[0])];		}				[LufaMethod(methodName="sinh", returnValues=1)]		public static function sinh(args:Array) : Array		{			var x : Number = args[0];			var result : Number = (Math.exp(x) - Math.exp(-x)) / 2;			return [result];		}		[LufaMethod(methodName="sqrt", returnValues=1)]		public static function sqrt(args:Array) : Array		{			return [Math.sqrt(args[0])];		}		[LufaMethod(methodName="tan", returnValues=1)]		public static function tan(args:Array) : Array		{			return [Math.tan(args[0])];		}				[LufaMethod(methodName="tanh", returnValues=1)]		public static function tanh(args:Array) : Array		{			return [sinh(args[0])[0] / cosh(args[0])[0]];		}				private static function randRange(minNum:Number, maxNum:Number):Number		{			return (Math.floor(Math.random() * (maxNum - minNum + 1)) + minNum);		}	}}