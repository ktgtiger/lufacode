package com.pixelboob.glufa {	import com.pixelboob.lufa.Interpreter;	import com.pixelboob.lufa.LuaScript;		import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.events.ProgressEvent;	import flash.net.FileFilter;	import flash.net.FileReference;	import flash.utils.ByteArray;		/**	 * @author mikej	 */	public class GlufaController 	{		private var luaScript : LuaScript;		private var fileBrowser : FileReference;		private var interpreter : Interpreter;		public function GlufaController()		{		}		public function selectLuac() : void		{			var filter : FileFilter = new FileFilter("Luac Files", "*.luac");			this.fileBrowser = new FileReference();			fileBrowser.addEventListener(Event.SELECT, handleFileSelected);			fileBrowser.browse([filter]);			}		private function handleFileSelected(event : Event) : void		{			fileBrowser.removeEventListener(Event.SELECT, handleFileSelected);			fileBrowser.addEventListener(Event.COMPLETE, this.handleLoadComplete);			fileBrowser.addEventListener(IOErrorEvent.IO_ERROR, this.handleIOError);						try			{				fileBrowser.load();			}			catch(error:Error)			{				trace("Error!");			}		}		private function handleIOError(event : IOErrorEvent) : void		{			fileBrowser.removeEventListener(Event.COMPLETE, this.handleLoadComplete);			fileBrowser.removeEventListener(IOErrorEvent.IO_ERROR, this.handleIOError);						trace("Error: "+event.text);		}		private function handleLoadComplete(event : Event) : void		{			fileBrowser.removeEventListener(Event.COMPLETE, this.handleLoadComplete);			fileBrowser.removeEventListener(IOErrorEvent.IO_ERROR, this.handleIOError);						fileBrowser.removeEventListener(Event.COMPLETE, this.handleLoadComplete);			this.luaScript = new LuaScript(fileBrowser.data);			}		public function run(pause:Boolean = false) : void		{			this.interpreter = new Interpreter();			interpreter.run(luaScript, pause);		}				public function step() : void		{			this.interpreter.step();			}				public function cont() : void		{			this.interpreter.cont();		}				public function pause() : void		{			this.interpreter.pause();		}	}}