package com.pixelboob.lufa.manager {	import com.pixelboob.lufa.Frame;	import com.pixelboob.lufa.Instruction;	import com.pixelboob.lufa.Interpreter;	import com.pixelboob.lufa.LuaFunction;	import com.pixelboob.lufa.Table;	import com.pixelboob.lufa.lib.MetaTable;	import com.pixelboob.lufa.lib.Utils;		/**	 * @author mikej	 */	public class ConditionalManager 	{		private var _interpreter : Interpreter;				public function ConditionalManager(interpreter : Interpreter)		{			this._interpreter = interpreter;		}		public function handleInstruction(inst : Instruction, func : LuaFunction, frame : Frame) : void		{			var op1 : Object = (inst.b & 0x100 ? func.constants[inst.b - 0x100] : frame.vars[inst.b]);			var op2 : Object = (inst.c & 0x100 ? func.constants[inst.c - 0x100] : frame.vars[inst.c]);			var test : Boolean = (inst.a == 1);								if(inst.opcode == Instruction.EQ) 			{ 				interpreter.log("EQ\t\t\t" + op1 + " == " + op2 + " == " + test);																if(handleEqEvent(op1, op2) != test) 				{					interpreter.log("JMP");					frame.pc++;				}			}			else if(inst.opcode == Instruction.LT) 			{				interpreter.log("LT\t\t\t " + op1 + " < " + op2 + " == " + test);				if(handleLtEvent(op1, op2) != test) 				{					interpreter.log("JMP");					frame.pc++;				}			}			else if(inst.opcode == Instruction.LE) 			{				interpreter.log("LE\t\t\t " + op1 + " <= " + op2 + " == " + test);				if(handleLeEvent(op1, op2) != test) 				{					interpreter.log("JMP");					frame.pc++;				}			}		}				public function handleEqEvent(op1 : Object, op2 : Object) : Boolean		{			if(Utils.type(op1) != Utils.type(op2))			{				return false;			}						if(op1 == op2)			{				return true;			}						return false;		}		public function handleLeEvent(op1 : Object, op2 : Object) : Boolean		{			if(Utils.type(op1) == "number" && Utils.type(op2) == "number")			{				return (op1 as Number) <= (op2 as Number);			}			else if(Utils.type(op1) == "string" && Utils.type(op2) == "string")			{				var str1 : String = (op1 as String);				var str2 : String = (op2 as String);				return (str1.localeCompare(str2) <= 0);			}						return false;		}		public function handleLtEvent(op1 : Object, op2 : Object) : Boolean		{			if(Utils.type(op1) == "number" && Utils.type(op2) == "number")			{				return (op1 as Number) < (op2 as Number);			}			else if(Utils.type(op1) == "string" && Utils.type(op2) == "string")			{				var str1 : String = (op1 as String);				var str2 : String = (op2 as String);				return (str1.localeCompare(str2) < 0);			}						return false;		}		public function getCompHandler(op1 : Object, op2 : Object, event : String) : Object		{			if(Utils.type(op1) != Utils.type(op2))			{				return null;			}						var mm1 : Object;			var mm2 : Object;						var mt1 : Table = MetaTable.getMetaTable(op1);			if(mt1 != null)			{				mm1 = mt1[event];			}						var mt2 : Table = MetaTable.getMetaTable(op2);			if(mt2 != null)			{				mm2 = mt2[event];			}						if(mm1 == mm2)			{				return mm1;			}			else			{				return null;			}		}				public function get interpreter() : Interpreter		{			return _interpreter;		}	}}