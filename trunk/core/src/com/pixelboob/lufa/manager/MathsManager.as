package com.pixelboob.lufa.manager {	import com.pixelboob.lufa.Frame;	import com.pixelboob.lufa.Instruction;	import com.pixelboob.lufa.Interpreter;	import com.pixelboob.lufa.LuaFunction;			/**	 * @author mikej	 */	public class MathsManager 	{		private var _interpreter : Interpreter;		public function MathsManager(interpreter : Interpreter)		{			this._interpreter = interpreter;		}		public function get interpreter() : Interpreter		{			return _interpreter;		}		public function handleInstruction(inst : Instruction, func : LuaFunction, frame : Frame) : void		{			var a : Object = (inst.b & 0x100 ? func.constants[inst.b - 0x100] : frame.vars[inst.b]);			var b : Object = (inst.c & 0x100 ? func.constants[inst.c - 0x100] : frame.vars[inst.c]);								var aNum : Number = parseInt(a + "");			var bNum : Number = parseInt(b + "");													if(inst.opcode == Instruction.ADD) 			{ 				interpreter.log("ADD\t\t\tR[" + inst.a + "] = " + a + " + " + b);										if(!isNaN(aNum) && !isNaN(bNum))				{					frame.vars[inst.a] = aNum + bNum; 				}				else				{					interpreter.handleEvent("__add", inst.a, a, b);				}			}			if(inst.opcode == Instruction.DIV) 			{ 				interpreter.log("DIV\t\t\tR[" + inst.a + "] = " + a + " / " + b);										if(!isNaN(aNum) && !isNaN(bNum))				{					frame.vars[inst.a] = aNum / bNum; 				}				else				{					interpreter.handleEvent("__div", inst.a, a, b);				}			}			if(inst.opcode == Instruction.SUB) 			{ 				interpreter.log("SUB\t\t\tR[" + inst.a + "] = " + a + " - " + b);										if(!isNaN(aNum) && !isNaN(bNum))				{					frame.vars[inst.a] = aNum - bNum; 				}				else				{					interpreter.handleEvent("__sub", inst.a, a, b);				}			}			if(inst.opcode == Instruction.MUL) 			{ 				interpreter.log("MUL\t\t\tR[" + inst.a + "] = " + a + " * " + b);										if(!isNaN(aNum) && !isNaN(bNum))				{					frame.vars[inst.a] = aNum * bNum; 				}				else				{					interpreter.handleEvent("__mul", inst.a, a, b);				}			}			if(inst.opcode == Instruction.POW) 			{ 				interpreter.log("POW\t\t\tR[" + inst.a + "] = " + a + " ^ " + b);				if(!isNaN(aNum) && !isNaN(bNum))				{					frame.vars[inst.a] = Math.pow(aNum, bNum);				}				else				{					interpreter.handleEvent("__pow", inst.a, a, b);				}			}			if(inst.opcode == Instruction.MOD) 			{ 				interpreter.log("MOD\t\t\tR[" + inst.a + "] = " + a + " % " + b);				if(!isNaN(aNum) && !isNaN(bNum))				{					frame.vars[inst.a] = aNum % bNum;				}				else				{					interpreter.handleEvent("__mod", inst.a, a, b);				}			}		}	}}