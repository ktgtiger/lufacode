package {	import com.pixelboob.lufa.Interpreter;	import com.pixelboob.lufa.InterpreterEvent;	import com.pixelboob.lufa.LuaScript;		import org.spicefactory.lib.logging.Appender;	import org.spicefactory.lib.logging.LogContext;	import org.spicefactory.lib.logging.LogFactory;	import org.spicefactory.lib.logging.LogLevel;	import org.spicefactory.lib.logging.Logger;	import org.spicefactory.lib.logging.impl.DefaultLogFactory;	import org.spicefactory.lib.logging.impl.TraceAppender;		import flash.display.Sprite;	import flash.events.Event;	import flash.net.URLLoader;	import flash.net.URLLoaderDataFormat;	import flash.net.URLRequest;	import flash.utils.ByteArray;	import flash.utils.Dictionary;		/**	 * @author moj	 */	public class LufaTest extends Sprite	{		private var logger : Logger = LogContext.getLogger(LufaTest);		private var scripts : Array;		private var interpreter : Interpreter;		public function LufaTest()		{			var factory : LogFactory = new DefaultLogFactory();			factory.setRootLogLevel(LogLevel.DEBUG);			var traceApp : Appender = new TraceAppender();			traceApp.threshold = LogLevel.TRACE;			factory.addAppender(traceApp);			LogContext.factory = factory;												this.scripts = ["table",			"move",			"loadk",			"loadbool",			"loadbool2",			"loadnil",			"loadnil2",			"global", // Both get + set global			"table", // New, set, and get table			"math", // add, sub, mul, div, mod, pow			"math2", // Constant folding tests			"mathsTestFull",			"unm",			"len",			"concat",			"self",			"call",			"closure",			"tailcall",			"forloop",			"test",			"testEquals",			"testNotEquals",			"testLessThan",			"testgreaterThan",			"testIfElseIf",			"testset",			"setlist",			"vararg",			"metatable"];											/* TODO:			 * close			 * getupval			 * setupval			 */						testNext();		}		private function testNext() : void		{			var scriptName : String = this.scripts.shift();			var loader : URLLoader = new URLLoader();			loader.dataFormat = URLLoaderDataFormat.BINARY;			loader.addEventListener(Event.COMPLETE, this.handleLoaded);			loader.load(new URLRequest("../testscripts/luac/" + scriptName + ".luac"));//examples/test.luac"));				//loader.load(new URLRequest("../examples/function_callback.luac"));				logger.info("LOADING " + scriptName);		}		public function handleScriptComplete(event : InterpreterEvent) : void		{			interpreter.removeEventListener(InterpreterEvent.COMPLETE, this.handleScriptComplete);						if(this.scripts.length > 0)			{				testNext();			}		}		private function handleLoaded(event : Event) : void		{			var loader : URLLoader = event.target as URLLoader;						loader.removeEventListener(Event.COMPLETE, this.handleLoaded);			logger.debug("Loaded " + (loader.data as ByteArray).length);						var arr : ByteArray = loader.data as ByteArray;			var luaScript : LuaScript = new LuaScript(arr);						this.interpreter = new Interpreter();			interpreter.addEventListener(InterpreterEvent.COMPLETE, this.handleScriptComplete);			interpreter.run(luaScript);		}	}}